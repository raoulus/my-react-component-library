{
  "_args": [
    [
      {
        "raw": "opts@>= 1.2.0",
        "scope": null,
        "escapedName": "opts",
        "name": "opts",
        "rawSpec": ">= 1.2.0",
        "spec": ">=1.2.0",
        "type": "range"
      },
      "/Users/rja/apps/github/styleguide/node_modules/livereload"
    ]
  ],
  "_from": "opts@>=1.2.0",
  "_id": "opts@1.2.6",
  "_inCache": true,
  "_location": "/opts",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/opts-1.2.6.tgz_1486777913091_0.19255280308425426"
  },
  "_npmUser": {
    "name": "mazzarelli",
    "email": "mazzarelli@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "opts@>= 1.2.0",
    "scope": null,
    "escapedName": "opts",
    "name": "opts",
    "rawSpec": ">= 1.2.0",
    "spec": ">=1.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/livereload"
  ],
  "_resolved": "https://registry.npmjs.org/opts/-/opts-1.2.6.tgz",
  "_shasum": "d185c0425cfdeb9da1d182908b65b5c0238febb3",
  "_shrinkwrap": null,
  "_spec": "opts@>= 1.2.0",
  "_where": "/Users/rja/apps/github/styleguide/node_modules/livereload",
  "author": {
    "name": "Oh Kay",
    "email": "khtdr.com@gmail.com",
    "url": "http://khtdr.com"
  },
  "bugs": {
    "url": "https://github.com/khtdr/opts/issues"
  },
  "dependencies": {},
  "description": "Command line argument parser.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d185c0425cfdeb9da1d182908b65b5c0238febb3",
    "tarball": "https://registry.npmjs.org/opts/-/opts-1.2.6.tgz"
  },
  "gitHead": "09c4644c3fa50cfb42d7764754be3554ea5b27ca",
  "homepage": "http://github.com/khtdr/opts",
  "main": "src/opts",
  "maintainers": [
    {
      "name": "mazzarelli",
      "email": "mazzarelli@gmail.com"
    }
  ],
  "name": "opts",
  "optionalDependencies": {},
  "readme": "\n\n# OPTS\n\n[![NPM version](https://img.shields.io/npm/v/opts.svg)](https://www.npmjs.com/package/opts)\n[![npm](https://img.shields.io/npm/l/express.svg)]()\n[![npm](https://img.shields.io/npm/dm/opts.svg)]()\n[![npm](https://img.shields.io/npm/dt/opts.svg)]()\n\n## Installation\nSimply download and include [src/opts.js](https://raw.githubusercontent.com/khtdr/opts/master/src/opts.js) to your Node.js project and import it with the require function. See included files for an example.\n\nIf you use NPM,  you can install it from the registry under the name `opts`\n```bash\nnpm install opts\n```\n\n[![NPM](https://nodei.co/npm/opts.png)](https://npmjs.org/package/opts)\n\n## Usage and Docs\n```javascript\nlet opts = require('opts');\nopts.parse(options, arguments, help);\n```\n### opts.parse(options, arguments, help)\n\n`options` is an array of option objects. Each option in the array can have the following fields. None are required, but you should at least provide a short or long name.\n\n#### Options\n```javascript\nlet options = [\n  { short       : 'l',\n    long        : 'list',\n    description : 'Show a list',\n    value       : false, // default false\n    required    : true, // default false\n    callback    : function (value) { ... },\n  }, // ... followed by more options\n];\n```\n\n##### Options vs Arguments\n\nOptions are flag arguments. Arguments are everything else. For example, in\n```bash\nls -l file\n```\nthe option(s) are `-l` and the argument(s) are `file`. The arguments can be\nafter, before, or among the options.\n\n#### Arguments\n\nArguments require less configuration.  This is an optional argument to\n`opts.parse`.\n\n```javascript\nlet arguments = \n  { name     : 'script',\n    required : true, // default false\n    callback : function (value) { ... },\n  };\n```\n\n#### Help Generator\nFinally, you can add an automatically generated help message by passing\na last parameter of `true`. This is also an optional argument to `opts.parse`.\n\n```javascript\nopts.parse(options, true);\n// or if you want more control, you can do:\n/*\n  options.push({\n    long        : 'help',\n    description : 'Show this help message',\n    callback    : require('opts').help,\n  }\n  opts.parse(options);\n*/\n```\n\n\n## Examples\n\n#### Example 1 -- Simple \"getting started\" example\n```javascript\n/**\n * Simple example with one optional parameter, including the help option.\n *\n * Examples:\n *   $ node example1.js\n *   \n *   Example 1\n *   $ node example1.js -v\n *   > v1.0\n *\n *   $ node example1.js --version\n *   > v1.0\n *\n *   $ node example1.js -version\n *   > Unknown option: -version\n *\n *   $ node example1.js --help\n *   > Show version and exit\n *         -v, --version\n *     Show this help message\n *         --help\n */\n\nvar opts = require('opts');\n\nvar options = [\n  { short       : 'v'\n  , long        : 'version'\n  , description : 'Show version and exit'\n  , callback    : function () { console.log('v1.0'); process.exit(1); }\n  }\n];\n\nopts.parse(options, true);\nconsole.log('Example 1');\nprocess.exit(0);\n```\n\n\n#### Example 2 -- Showing more features\n```javascript\n/**\n * More complex example.\n *\n * Run:\n *   node example2.js --help\n * and play with the options to see the behavior.\n *\n * This example shows different ways of using the library. It is deliberately \n * inconsistent. Choose the style that suits you best.\n */\n\nvar opts = require('opts')\n  , host = 'localhost'; // default host value\n\nvar options = [\n  { short       : 'v'\n  , long        : 'version'\n  , description : 'Show version and exit'\n  , callback    : function () { console.log('v1.0'); process.exit(1); }\n  },\n  { short       : 'l'\n  , long        : 'list'\n  , description : 'List all files'\n  },\n  { short       : 'f'\n  , long        : 'file'\n  , description : 'Load a file'\n  , value       : true\n  , required    : true\n  },\n  { short       : 'd'\n  , long        : 'debug'\n  , description : 'Set a debug level'\n  , value       : true\n  },\n  { short       : 'h'\n  , long        : 'host'\n  , description : 'The hostname to connect to'\n  , value       : true\n  , callback    : function (value) { host = value; } // override host value\n  },\n  { short       : 'p'\n  , long        : 'port'\n  , description : 'The port to connect to'\n  , value       : true\n  },\n];\n\nopts.parse(options, true);\n\nvar port  = opts.get('port') || 8000 // default port value\n  , debug = opts.get('d') || 'info'  // default debug value\n  , file  = opts.get('f')\n  , list  = opts.get('list');\n\nvar arg1 = opts.args()[0]\n  , arg2 = opts.args()[1];\n\n\nif (list) console.log('List arg was set');\nif (file) console.log('File arg was set: ' + file);\nconsole.log('Debug level is: ' + debug);\nconsole.log('Host is: ' + host);\nconsole.log('Port is: ' + port);\n\nif (arg1) console.log('Extra arg 1: ' + arg1);\nif (arg2) console.log('Extra arg 2: ' + arg2);\n\nprocess.exit(0);\n```\n\n#### Example 3 -- Showing conflict detection\n\n```javascript\n/**\n * Simple example that is broken by design (conflicting options)\n *\n * Examples:\n *   $ node example3.js\n *   > Conflicting flags: -v\n */\n\nvar opts = require('opts');\n\nvar options = [\n  { short       : 'v'\n  , description : 'Show version and exit'\n  },\n  { short       : 'v'\n  , description : 'Be verbose'\n  },\n];\n\nopts.parse(options);\nconsole.log('Example 3');\nprocess.exit(0);\n```\n\n#### Example 4 -- Shows how to use named arguments and using from within a library\n\n```javascript\n/**\n * Advanced example using namespaces for a library and named arguments\n *\n * Run:\n *   node example4.js --help\n * and play with the options to see the behavior.\n */\n\nvar opts = require('opts')\n  , host = 'localhost'; // default host value\n\n// Example of using some library in the same app\nvar libOpts = [\n  { short       : 'l'\n  , long        : 'list'\n  , description : 'Show the library list'\n  , callback    : function () { console.log('mylib list!'); },\n  },\n];\nopts.add(libOpts, 'mylib');\n\nvar options = [\n  { short       : 'l' // deliberately conflicting with 'mylib' option\n  , long        : 'list'\n  , description : 'List all files'\n  },\n  { short       : 'd'\n  , long        : 'debug'\n  , description : 'Set a debug level'\n  , value       : true\n  },\n];\n\nvar arguments = [ { name : 'script' , required : true }\n                , { name : 'timeout' }\n                ];\n\nopts.parse(options, arguments, true);\n\nvar debug = opts.get('d') || 'info'  // default debug value\n  , list  = opts.get('list');\n\nvar script  = opts.arg('script')\n  , timeout = opts.arg('timeout') || 30;\n\n\nif (list) console.log('List arg was set');\nconsole.log('Debug level is: ' + debug);\nconsole.log('Script is: ' + script);\nconsole.log('Timeout is: ' + timeout);\n\nprocess.exit(0);\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/khtdr/opts.git"
  },
  "scripts": {},
  "version": "1.2.6"
}
