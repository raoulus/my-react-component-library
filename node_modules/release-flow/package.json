{
  "_args": [
    [
      {
        "raw": "release-flow@1.2.1",
        "scope": null,
        "escapedName": "release-flow",
        "name": "release-flow",
        "rawSpec": "1.2.1",
        "spec": "1.2.1",
        "type": "version"
      },
      "/Users/rja/apps/github/styleguide"
    ]
  ],
  "_from": "release-flow@1.2.1",
  "_id": "release-flow@1.2.1",
  "_inCache": true,
  "_location": "/release-flow",
  "_nodeVersion": "6.2.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/release-flow-1.2.1.tgz_1470758965684_0.6150246050674468"
  },
  "_npmUser": {
    "name": "mcasimir",
    "email": "maurizio.cas@gmail.com"
  },
  "_npmVersion": "3.9.3",
  "_phantomChildren": {
    "babel-runtime": "6.25.0",
    "core-js": "2.4.1"
  },
  "_requested": {
    "raw": "release-flow@1.2.1",
    "scope": null,
    "escapedName": "release-flow",
    "name": "release-flow",
    "rawSpec": "1.2.1",
    "spec": "1.2.1",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/release-flow/-/release-flow-1.2.1.tgz",
  "_shasum": "6da06b463e256eaa566703493c75cc4317c1c5b2",
  "_shrinkwrap": null,
  "_spec": "release-flow@1.2.1",
  "_where": "/Users/rja/apps/github/styleguide",
  "author": {
    "name": "mcasimir",
    "url": "https://github.com/mcasimir"
  },
  "bin": {
    "release-flow": "./lib/cli.js"
  },
  "bugs": {
    "url": "https://github.com/mcasimir/release-flow/issues"
  },
  "dependencies": {
    "babel-polyfill": "6.9.1",
    "chalk": "1.1.3",
    "conventional-commits-filter": "1.0.0",
    "conventional-commits-parser": "1.2.2",
    "memoize-decorator": "1.0.2",
    "prepend-file": "1.3.0",
    "semver": "5.3.0",
    "yargs": "4.8.1"
  },
  "description": "Git flow conventional releases",
  "devDependencies": {
    "babel-cli": "6.11.4",
    "babel-core": "6.11.4",
    "babel-eslint": "6.1.2",
    "babel-plugin-istanbul": "1.0.3",
    "babel-plugin-syntax-async-functions": "6.8.0",
    "babel-plugin-transform-builtin-extend": "1.1.0",
    "babel-plugin-transform-class-properties": "6.11.5",
    "babel-plugin-transform-decorators-legacy": "1.3.4",
    "babel-plugin-transform-object-assign": "6.8.0",
    "babel-plugin-transform-regenerator": "6.11.4",
    "babel-preset-es2015": "6.9.0",
    "babel-preset-stage-0": "6.5.0",
    "eslint": "3.2.0",
    "eslint-config-google": "0.6.0",
    "eslint-plugin-babel": "3.3.0",
    "mocha": "2.5.3",
    "mock-require": "1.3.0",
    "nyc": "7.1.0",
    "sinon": "1.17.5"
  },
  "directories": {},
  "dist": {
    "shasum": "6da06b463e256eaa566703493c75cc4317c1c5b2",
    "tarball": "https://registry.npmjs.org/release-flow/-/release-flow-1.2.1.tgz"
  },
  "gitHead": "016fe4278ec9812688a96bc2b7a9154e7cb7061a",
  "homepage": "https://github.com/mcasimir/release-flow#readme",
  "license": "ISC",
  "main": "dist/Release.js",
  "maintainers": [
    {
      "name": "mcasimir",
      "email": "maurizio.cas@gmail.com"
    }
  ],
  "name": "release-flow",
  "nyc": {
    "include": [
      "src/**/*.js"
    ],
    "sourceMap": false,
    "instrument": false
  },
  "optionalDependencies": {},
  "pre-commit": {
    "run": [
      "build"
    ]
  },
  "readme": "# release-flow\n\n[![Build Status](https://travis-ci.org/mcasimir/release-flow.svg?branch=master)](https://travis-ci.org/mcasimir/release-flow) [![codecov](https://codecov.io/gh/mcasimir/release-flow/branch/master/graph/badge.svg)](https://codecov.io/gh/mcasimir/release-flow)\n\n## Git flow conventional releases\n\n`release-flow` is a command line tool that simplifies the developer side of software release process taking over tedious and error prone tasks.\n\n`release-flow` mixes [git flow releases](http://danielkummer.github.io/git-flow-cheatsheet/) with conventional commits to make release process safe and painless.\n\n### Features\n\n- Based on commit conventions\n- Complements perfectly with CI tools\n- Flexible branching model\n- Pluggable design\n- Completely configurable and customizable\n- Stand-alone (gulp/grunt integration is possible)\n- Suitable for any kind of project and language (small apps, opensource projects, libs, enterprise applications)\n- Built in plugins for Changelog generation and NPM bumps\n\n### Installation\n\nGlobally (use from console)\n\n``` sh\nnpm i -g release-flow\n```\n\nAs project dependency (use through npm script or programmatically)\n\n``` sh\nnpm i --save-dev release-flow\n```\n\nIn your `package.json`\n\n``` json\n\"scripts\": {\n  \"release\": \"release-flow\"\n}\n```\n\n### Usage\n\n#### Start a release (from your development branch)\n\n``` sh\nrelease-flow start\n```\n\nEffect:\n\n- Fetches remote changes\n- Compute the next version bump from commits (ie. `feat commit === minor`)\n- Validates the operation (no uncommitted/untracked changes, no existing tag for the version)\n- Creates and checks out a new release branch\n- Commits (without pushing) any eventual changes made to start the release (ie. changelog, bump package.json)\n\n#### Publish a release (from the new release branch)\n\n``` sh\nrelease-flow publish\n```\n\n#### Finalize a release (from the release branch)\n\n``` sh\nrelease-flow finish\n```\n\nEffect:\n\n- Fetches remote changes\n- Validates the operation (no uncommitted/untracked changes)\n- Merges release branch on master\n- Tags master after the release version\n- Merges back to development (if different from master)\n\n#### Start/Publish/Finish with one command (from your development branch)\n\n``` sh\nrelease-flow full\n```\n\nEffect:\n\nSame then issuing `release-flow start`, `release-flow publish` and `release-flow finish` in sequence.\n\n**NOTE:** This approach is especially suitable for libraries and small projects that does not require a QA phase on the release branch.\n\n#### Supported Branching model\n\n`release-flow` supports both the canonical `git-flow` branching model with develop/master and a\nsimplified branching with just master.\n\n##### Git flow model (default)\n\n``` js\n// releaseflowrc\nmodule.exports = {\n  developmentBranch: 'develop',\n  productionBranch: 'master'\n};\n```\n\n![full-git-flow](https://github.com/mcasimir/release-flow/raw/master/docs/assets/full-git-flow.png)\n\n##### Simplified model\n\n``` js\n// releaseflowrc\nmodule.exports = {\n  developmentBranch: 'master',\n  productionBranch: 'master'\n};\n```\n\n![simplified-git-flow](https://github.com/mcasimir/release-flow/raw/master/docs/assets/simplified.png)\n\n#### Commit conventions\n\nRelease flow uses conventional commits to simplify the release process (computing next version, generating changelogs).\n\nConventional commits are commits with a specific message format:\n\n```\ntype([scope]): message [BREAKING]\n```\n\nie.\n\n- fix(homepage): fixed title alignment\n- feat: implemented user login\n- feat(api): BREAKING changed endpoint to list users\n\n##### Default bump detection logic\n\n- Has one commit whose message contains `BREAKING` &rarr; `major`\n- Has one commit whose type is feat &rarr; `minor`\n- Otherwise &rarr; `patch`\n\n#### Configuration\n\n`release-flow` loads a `releaseflowrc` javascript file to allow configuration.\n\nThe following is an extract of the default configuration file:\n\n``` js\nexport default {\n  developmentBranch: 'develop',\n  productionBranch: 'master',\n  releaseBranchPrefix: 'release/',\n  tagPrefix: 'v',\n  remoteName: 'origin',\n  logLevel: 'info',\n  initialVersion: '1.0.0',\n  repoHttpUrl: null,\n  ErrorFactory: DefaultErrorFactory,\n  Logger: DefaultLogger,\n  repoHttpProtocol: 'https',\n  getBump: getBump,\n  plugins: []\n};\n```\n\n#### Included Plugins\n\n##### Bump package json\n\nBumps package json version on start.\n\n``` js\n// releaseflowrc\nmodule.exports = {\n  plugins: [\n    'bump-package-json'\n  ]\n};\n```\n\n##### Generate changelog\n\nGenerates a changelog for the release and prepend it `CHANGELOG.md` or the choosen path on start.\n\n``` js\n// releaseflowrc\nmodule.exports = {\n  changelogPath: 'CHANGELOG.md'\n  changelogTemplate: release => 'changelog contents'\n  plugins: [\n    'generate-changelog'\n  ]\n};\n```\n\n#### Advanced usage and plugin creation\n\nA plugin is just a function of the form `install(release) => null`. To register it is enough to pass it in releaseflowrc\n\n``` js\n// releaseflowrc\nmodule.exports = {\n  plugins: [\n    release => {\n      // ... do something    \n    }\n  ]\n};\n```\n\nTiplcally a plugin adds some `step` to a release phase (one of start, publish or finish).\n\nA step is an object with a `name` and a `run()` function.\n\nTo attach a step to a phase is possible to use array methods like `push` or `splice` on the `release.phases.[start/publish/finish].steps` array or use the `release.phases.[start/publish/finish].before` method to insert the step before another specific step:\n\n``` js\n// releaseflowrc\nmodule.exports = {\n  plugins: [\n    release => {\n      let logVersion = {\n        name: 'logVersion',\n        run(release) {\n          console.log(release.version);\n        }\n      };\n\n      release.phases.start.before('commit', logVersion);\n    }\n  ]\n};\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcasimir/release-flow.git"
  },
  "scripts": {
    "build": "npm run clean && babel src -d lib",
    "clean": "rm -Rf ./lib",
    "lint": "eslint . --quiet",
    "release": "node ./lib/cli.js",
    "test": "NODE_ENV=test nyc -r lcov -r text npm run test:unit",
    "test:ci": "npm run lint && npm test",
    "test:unit": "mocha --compilers js:babel-register --require babel-polyfill 'test/**/*.spec.js'"
  },
  "version": "1.2.1"
}
