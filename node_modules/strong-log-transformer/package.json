{
  "_args": [
    [
      {
        "raw": "strong-log-transformer@^1.0.6",
        "scope": null,
        "escapedName": "strong-log-transformer",
        "name": "strong-log-transformer",
        "rawSpec": "^1.0.6",
        "spec": ">=1.0.6 <2.0.0",
        "type": "range"
      },
      "/Users/rja/apps/github/my-react-component-library/node_modules/lerna"
    ]
  ],
  "_from": "strong-log-transformer@>=1.0.6 <2.0.0",
  "_id": "strong-log-transformer@1.0.6",
  "_inCache": true,
  "_location": "/strong-log-transformer",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/strong-log-transformer-1.0.6.tgz_1472737436122_0.14051809604279697"
  },
  "_npmUser": {
    "name": "octet",
    "email": "vieuxtech@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "strong-log-transformer@^1.0.6",
    "scope": null,
    "escapedName": "strong-log-transformer",
    "name": "strong-log-transformer",
    "rawSpec": "^1.0.6",
    "spec": ">=1.0.6 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/lerna"
  ],
  "_resolved": "https://registry.npmjs.org/strong-log-transformer/-/strong-log-transformer-1.0.6.tgz",
  "_shasum": "f7fb93758a69a571140181277eea0c2eb1301fa3",
  "_shrinkwrap": null,
  "_spec": "strong-log-transformer@^1.0.6",
  "_where": "/Users/rja/apps/github/my-react-component-library/node_modules/lerna",
  "author": {
    "name": "Ryan Graham",
    "email": "ryan@strongloop.com"
  },
  "bin": {
    "sl-log-transformer": "bin/sl-log-transformer.js"
  },
  "bugs": {
    "url": "https://github.com/strongloop/strong-log-transformer/issues"
  },
  "dependencies": {
    "byline": "^5.0.0",
    "duplexer": "^0.1.1",
    "minimist": "^0.1.0",
    "moment": "^2.6.0",
    "through": "^2.3.4"
  },
  "description": "Stream transformer that prefixes lines with timestamps and other things.",
  "devDependencies": {
    "tap": "^1.3.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "f7fb93758a69a571140181277eea0c2eb1301fa3",
    "tarball": "https://registry.npmjs.org/strong-log-transformer/-/strong-log-transformer-1.0.6.tgz"
  },
  "gitHead": "2d0c0665422d6bb06b9bff3b56ea5cbd172edb67",
  "homepage": "https://github.com/strongloop/strong-log-transformer",
  "keywords": [
    "logging",
    "streams"
  ],
  "license": "Artistic-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bajtos",
      "email": "mbajtoss@gmail.com"
    },
    {
      "name": "chandadharap",
      "email": "chanda_dharap@yahoo.com"
    },
    {
      "name": "ibmcloud-admin",
      "email": "rmg@ca.ibm.com"
    },
    {
      "name": "kraman",
      "email": "kraman@gmail.com"
    },
    {
      "name": "octet",
      "email": "vieuxtech@gmail.com"
    },
    {
      "name": "rfeng",
      "email": "enjoyjava@gmail.com"
    },
    {
      "name": "ritch",
      "email": "skawful@gmail.com"
    },
    {
      "name": "rmg",
      "email": "r.m.graham@gmail.com"
    },
    {
      "name": "setogit",
      "email": "setogit@gmail.com"
    },
    {
      "name": "strongloop",
      "email": "strngops@us.ibm.com"
    },
    {
      "name": "superkhau",
      "email": "superkhau@gmail.com"
    }
  ],
  "name": "strong-log-transformer",
  "optionalDependencies": {},
  "readme": "strong-log-transformer\n======================\n\nA stream filter for performing common log stream transformations like\ntimestamping and joining multi-line messages.\n\n**This is not a logger!** But it may be useful for rolling your own logger.\n\n## Usage\n\nInstall strong-log-transformer and add it to your dependencies list.\n```sh\nnpm install --save strong-log-transformer\n```\n\n### CLI\n\nWhen installed globally the `sl-log-transformer` CLI utility is exposed. It is\nprimarily used for testing, but it can also be used as an alternative to\nawk or sed for jobs such as timestamping every line of another process's\noutput. This can be useful for cron jobs, for example.\n\n```sh\n$ npm install -g strong-log-transformer\n$ sl-log-tranformer --help\nUsage: sl-log-transformer [options]\n\nStream transformer that prefixes lines with timestamps and other things.\n\nOPTIONS:\n   --format FORMAT        default: \"text\"\n   --tag TAG              default: \"\"\n   --mergeMultiline       default: off\n   --timeStamp            default: off\n```\n\n### Line Merging\n\nIn order to keep things flowing when line merging is enabled (disabled by\ndefault) there is a sliding 10ms timeout for flushing the buffer. This means\nthat whitespace leading lines are only considered part of the previous line if\nthey arrive within 10ms of the previous line, which should be reasonable\nconsidering the lines were likely written in the same `write()`.\n\n### Example\n\nHere's an example using the transformer to annotate log messages from cluster\nworkers.\n\n```js\nvar cluster = require('cluster');\n\nif (cluster.isMaster) {\n  // Make sure workers get their own stdout/stderr streams\n  cluster.setupMaster({silent: true});\n\n  // require log transformer module\n  var transformer = require('strong-log-transformer');\n\n  // Following the 12-factor app model, we pipe to stdout, but we could easily\n  // pipe to any other stream(s), such as a FileStream for a log file.\n\n  // stdout is plain line-oriented logs, but we want to add timestamps\n  var info = transformer({ timeStamp: true,\n                           tag: 'INFO' });\n  // stderr will only be used for strack traces on crash, which are multi-line\n  var error = transformer({ timeStamp: true,\n                            tag: 'ERROR',\n                            mergeMultiline: true });\n\n  // Each worker's stdout/stderr gets piped into our info and erro transformers\n  cluster.on('fork', function(worker) {\n    console.error('connecting worker');\n    worker.process.stdout.pipe(info).pipe(process.stdout);\n    worker.process.stderr.pipe(error).pipe(process.stdout);\n  });\n\n  //... cluster fork logic goes here ...\n  cluster.fork();\n\n} else {\n  //... worker code here ...\n\n  console.log('new worker, this line will be timestamped!');\n  throw new Error('This will generate a multi-line message!');\n}\n\n```\n\nWhen we run the example code as `example.js` we get:\n```sh\n$ node example.js\nconnecting worker\n2014-06-08T18:54:00.920Z INFO new worker, this line will be timestamped!\n2014-06-08T18:54:00.926Z ERROR /Users/ryan/work/strong-log-transformer/e.js:33\\n    throw new Error('This will generate a multi-line message!');\\n          ^\n2014-06-08T18:54:00.926Z ERROR Error: This will generate a multi-line message!\\n    at null._onTimeout (/Users/ryan/work/strong-log-transformer/e.js:33:11)\\n    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/strongloop/strong-log-transformer.git"
  },
  "scripts": {
    "test": "tap --coverage --coverage-report=cobertura test/test-*"
  },
  "version": "1.0.6"
}
